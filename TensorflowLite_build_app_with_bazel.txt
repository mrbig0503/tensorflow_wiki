* Sync tensorflow source
  -> git clone https://github.com/tensorflow/tensorflow.git
  Update:
  -> git clone --recurse-submodules https://github.com/tensorflow/tensorflow.git

* configure the build under tensorflow
  -> ./configure

* Edit the WORKSPACE
android_sdk_repository(
    name = "androidsdk",
    api_level = 23,
    # Ensure that you have the build_tools_version below installed in the
    # SDK manager as it updates periodically.
    build_tools_version = "26.0.1",
    # Replace with path to Android SDK on your system
    path = "/home/jui/Android/Sdk",
)

android_ndk_repository(
    name="androidndk",
    path="/home/jui/Android/Sdk/ndk-bundle/android-ndk-r14b",
    # This needs to be 14 or higher to compile TensorFlow.
    # Please specify API level to >= 21 to build for 64-bit
    # archtectures or the Android NDK will automatically select biggest
    # API level that it supports without notice.
    # Note that the NDK version is not the API level.
    api_level=14)

* SDK was installed in Android Studio SDK Manager
* NDK was downloaded from https://developer.android.com/ndk/downloads/older_releases
  Unzip the folder to SDK/ndk-bundle


* Build command:
  -> bazel build --cxxopt=--std=c++11 //tensorflow/contrib/lite/java/demo/app/src/main:TfLiteCameraDemo

* Reference
  https://www.tensorflow.org/mobile/tflite/demo_android

* Building by Bazel is without Tensorflow/TensorflowLite AAR, it use the source code.
  Building by Android Studio is with Tensorflow/TensorflowLite AAR.


* As I didn't check other error:
  "This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options."

  So, I found that adding '--cxxopt=-std=c++11' to the build statement can fix the error.
  i.e. bazel build --cxxopt=-std=c++11 -c opt //tensorflow/examples/android:tensorflow_demo

  Finally, build completed successfully.

* Build libtensorflowlite_jni.so for ARM 32 bits
  bazel build  --cxxopt='--std=c++11' -c opt --config=android --cpu=armeabi-v7a //tensorflow/contrib/lite/java:libtensorflowlite_jni.so 
  Note:
    1. //androidsdk and //androidndk are needed as above.
    2. In tools/bazel.rc
       build:android_arm --config=android
       build:android_arm --cpu=armeabi-v7a
       build:android_arm --fat_apk_cpu=armeabi-v7a
       build:android_arm64 --config=android
       build:android_arm64 --cpu=arm64-v8a
       build:android_arm64 --fat_apk_cpu=arm64-v8a
    3. Use file to check the library.
       file bazel-bin/tensorflow/contrib/lite/java/libtensorflowlite_jni.so
       bazel-bin/tensorflow/contrib/lite/java/libtensorflowlite_jni.so: 
         ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, stripped

* Build libtensorflowlite_jni.so for ARM 64 bits
  bazel build  --cxxopt='--std=c++11' -c opt --config=android --cpu=arm64-v8a //tensorflow/contrib/lite/java:libtensorflowlite_jni.so

* Build Tensorflow lite AAR
  bazel build  --cxxopt='--std=c++11' -c opt --config=android --cpu=armeabi-v7a //tensorflow/contrib/lite/java:tensorflowlite
  
  Note: ERROR: missing input file '@androidsdk//:build-tools/26.0.1/aapt'
    Check available version in /home/jui/Android/Sdk/build-tools
    and modify the version in WORKSPACE

  In Android Studio, File -> New -> Import Module, 
  Choose Import JAR/AAR and find bazel-bin/tensorflow/contrib/lite/java/libtensorflowlite.jar, then Finish


* Build the pip package
  bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package
  bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package
  ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
  pip install /tmp/tensorflow_pkg/tensorflow-version-tags.whl
